import TelegramBot from 'node-telegram-bot-api'; // –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram
import {chatCreateItem, chatGetItem} from './api/chat.js';  // –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–æ–º
import {messageCreateItem, messageGetList, messageUpdateItem} from './api/message.js'; // –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
import {initMongo} from './tools/mongo.js';
import {assistantProcess, initAssistant} from './api/assistant.js';  // –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–æ–º LLM
import {TELEGRAM_TOKEN} from './config.js'; // –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏


if(!TELEGRAM_TOKEN) {
  throw new Error('TELEGRAM_TOKEN is required');
}

const bot = new TelegramBot(TELEGRAM_TOKEN, {
  polling: false,
  webHook: false,
});

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ Telegram
 * @param error
 * @returns {Promise<void>}
 */
async function onPollingError(error) {
  console.log('polling_error', error.code);
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π Telegram
 * @param msg
 * @returns {Promise<void>}
 */
async function onMessage(msg) {
  if (!msg?.chat?.id || !msg?.text) {
    return;
  }

  //  –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —á–∞—Ç
  let chat = await chatGetItem(msg.chat.id);

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
  if (!chat) {
    chat = await chatCreateItem(msg.chat).catch(err => {
      console.error(err);
    });
  }

  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É –µ—Å–ª–∏ —á–∞—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
  if (!chat?.active) {
    await bot.sendMessage(chat._id, 'Access denied');
    return;
  }

  // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
  const oldMessages = await messageGetList(chat._id);

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –¥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ–Ω–∫–∏
  if (oldMessages.length && !oldMessages[0].answer) {
    await bot.sendMessage(chat._id, 'ü§î –ü–æ–¥–æ–∂–¥–∏—Ç–µ, —è –µ—â–µ –¥—É–º–∞—é...');
    return;
  }

  // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞
  const message = await messageCreateItem(chat._id, msg.text);

  // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞
  const messages = [];
  let i = oldMessages.length;
  while (i--) {
    const message = oldMessages[i];
    if (!(message.text && message.answer && !message.error)) {
      continue;
    }
    messages.push({
      role: 'user',
      content: message.text,
    });
    messages.push({
      role: 'assistant',
      content: message.answer,
    });
  }
  messages.push({
    role: 'user',
    content: msg.text,
  });

  const [
    answer,
    waitMessage,
  ] = await Promise.all([
    assistantProcess('vsegpt', messages), // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç
    bot.sendMessage(chat._id, 'ü§î –î–∞–π—Ç–µ –ø–æ–¥—É–º–∞—Ç—å...'), // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≥–ª—É—à–∫—É
  ]);
  if (waitMessage && waitMessage.message_id) {
    await bot.deleteMessage(chat._id, waitMessage.message_id); // —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏ –∑–∞–≥–ª—É—à–∫—É
  }

  await Promise.all([
    messageUpdateItem(message._id, answer), // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    bot.sendMessage(chat._id, answer), // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  ]);
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã
 * @returns {Promise<void>}
 */
async function bootstrap() {
  //
  await initMongo();

  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫ —Ä–∞–±–æ—Ç–µ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
  await initAssistant();

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram
  bot.on('polling_error', onPollingError);
  bot.on('message', onMessage);
  await bot.startPolling({restart: true});
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
bootstrap()
  .then((res) => res && console.log(res))
  .catch((err) => err && console.log(err));
